# Copyright 2025 Darian Lee
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
name: CI

"on":
  push:
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - ".pre-commit-config.yaml"
      - "scripts/**"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - ".pre-commit-config.yaml"
      - "scripts/**"
      - ".github/workflows/ci.yml"

permissions:
  contents: read

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Code Scan (pre-commit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: "v0.53.0"

      - name: Point pre-commit to terraform
        run: echo "PCT_TFPATH=$(which terraform)" >> $GITHUB_ENV

      - name: Install CLI tools (auto-detect release assets and install)
        env:
          # optional: workflow automatically uses GITHUB_TOKEN if present to avoid API rate limits
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          set -x

          BIN_DIR="$GITHUB_WORKSPACE/.bin"
          mkdir -p "$BIN_DIR"

          # Versions to use (change these variables to update versions)
          TERRAFORM_DOCS_REPO="terraform-docs/terraform-docs"
          TERRAFORM_DOCS_TAG="v0.17.0"

          KUBECONFORM_REPO="yannh/kubeconform"
          KUBECONFORM_TAG="v0.4.16"

          ADDLICENSE_REPO="google/addlicense"
          ADDLICENSE_TAG="v0.17.0"

          # helper: query GitHub Releases API and return a browser_download_url for a linux/amd64 asset
          get_asset_url() {
            repo="$1"
            tag="$2"
            if [ -n "${GITHUB_TOKEN:-}" ]; then
              resp=$(curl -fsSL -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${repo}/releases/tags/${tag}")
            else
              resp=$(curl -fsSL "https://api.github.com/repos/${repo}/releases/tags/${tag}")
            fi
            # try to find asset name matching linux and amd64/x86_64 (case-insensitive)
            url=$(echo "$resp" | jq -r --arg re 'linux.*(amd64|x86_64)|amd64|x86_64' '.assets[] | select(.name | test($re; "i")) | .browser_download_url' | head -n1)
            echo "$url"
          }

          download_extract_install() {
            repo="$1"
            tag="$2"
            name="$3"

            echo "Looking up release asset for ${repo} ${tag}..."
            url="$(get_asset_url "$repo" "$tag")"
            if [ -z "$url" ] || [ "$url" = "null" ]; then
              echo "ERROR: no linux/amd64 asset found for ${repo} ${tag} via Releases API"
              return 1
            fi

            echo "Downloading ${name} from: $url"
            tmpdir="$(mktemp -d)"
            archive="$tmpdir/asset.archive"
            curl -fsSL -L -o "$archive" "$url"

            # compute and print sha256 for convenience (you can later pin this in workflow)
            echo "sha256:"
            sha256sum "$archive" || true

            # extract based on file magic
            if file "$archive" | grep -qE 'gzip compressed data|tar archive'; then
              tar -xzf "$archive" -C "$tmpdir"
            elif file "$archive" | grep -qE 'XZ compressed data'; then
              tar -xJf "$archive" -C "$tmpdir"
            elif file "$archive" | grep -qE 'Zip archive data'; then
              unzip -q "$archive" -d "$tmpdir"
            else
              # fallback attempts
              if tar -xzf "$archive" -C "$tmpdir" 2>/dev/null; then
                :
              elif tar -xJf "$archive" -C "$tmpdir" 2>/dev/null; then
                :
              elif unzip -q "$archive" -d "$tmpdir" 2>/dev/null; then
                :
              else
                echo "ERROR: unknown archive format for downloaded asset"
                rm -rf "$tmpdir"
                return 1
              fi
            fi

            # find an executable binary inside the extracted tree; prefer exact name matches
            binpath=$(find "$tmpdir" -type f \( -name "${name}" -o -name "${name}*" \) -perm /111 -print -quit || true)
            if [ -z "$binpath" ]; then
              binpath=$(find "$tmpdir" -type f -perm /111 -print -quit || true)
            fi

            if [ -z "$binpath" ]; then
              echo "ERROR: could not find executable inside archive for ${name}"
              ls -la "$tmpdir"
              rm -rf "$tmpdir"
              return 1
            fi

            mv "$binpath" "${BIN_DIR}/${name}"
            chmod +x "${BIN_DIR}/${name}"
            echo "Installed ${name} -> ${BIN_DIR}/${name}"
            rm -rf "$tmpdir"
          }

          # install prerequisites for parsing and extraction
          sudo apt-get update -y
          sudo apt-get install -y jq unzip xz-utils

          download_extract_install "$TERRAFORM_DOCS_REPO" "$TERRAFORM_DOCS_TAG" "terraform-docs"
          download_extract_install "$KUBECONFORM_REPO" "$KUBECONFORM_TAG" "kubeconform"
          download_extract_install "$ADDLICENSE_REPO" "$ADDLICENSE_TAG" "addlicense"

          # add local bin to PATH for subsequent steps
          echo "$BIN_DIR" >> $GITHUB_PATH
        shell: bash

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks
        env:
          PCT_TFPATH: terraform
        run: pre-commit run --all-files

  tf-validate:
    name: Terraform Validate (dev/test/prod)
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env_dir: [dev]
        # Add depending on your env directories
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"
      - name: terraform fmt (repo-wide)
        run: terraform fmt -check -recursive
      - name: terraform init (no backend)
        working-directory: env/${{ matrix.env_dir }}
        run: terraform init -backend=false
      - name: terraform validate
        working-directory: env/${{ matrix.env_dir }}
        run: terraform validate

  tf-plan:
    name: Terraform Plan (PR only)
    if: github.event_name == 'pull_request'
    needs: tf-validate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env_dir: [dev]  # test, prod
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"
      - name: terraform init (no backend)
        working-directory: env/${{ matrix.env_dir }}
        run: terraform init -backend=false
      - name: terraform plan
        working-directory: env/${{ matrix.env_dir }}
        run: |
          terraform plan \
            -input=false -refresh=false -lock=false \
            -out=tfplan.bin || true
      - name: show plan
        working-directory: env/${{ matrix.env_dir }}
        run: terraform show -no-color tfplan.bin > tfplan.txt || true
      - name: upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env_dir }}-tfplan
          path: env/${{ matrix.env_dir }}/tfplan.txt
