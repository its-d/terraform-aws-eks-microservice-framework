# Copyright 2025 Darian Lee
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
name: CI

on:
  push:
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - ".pre-commit-config.yaml"
      - "scripts/**"
      - ".github/workflows/ci.yml"
      - ".github/workflows/ci.yaml"
  pull_request:
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - ".pre-commit-config.yaml"
      - "scripts/**"
      - ".github/workflows/ci.yml"
      - ".github/workflows/ci.yaml"

permissions:
  contents: read

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Code Scan (pre-commit)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: "v0.53.0"

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install CLI tools (terraform-docs, kubeconform, addlicense)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          set -x

          BIN_DIR="$GITHUB_WORKSPACE/.bin"
          mkdir -p "$BIN_DIR"
          echo "$BIN_DIR" >> "$GITHUB_PATH"

          # --- Versions (pin here) ---
          TERRAFORM_DOCS_REPO="terraform-docs/terraform-docs"
          TERRAFORM_DOCS_TAG="v0.17.0"         # valid
          TERRAFORM_DOCS_BIN="terraform-docs"

          KUBECONFORM_REPO="yannh/kubeconform"
          KUBECONFORM_TAG="v0.6.7"             # valid
          KUBECONFORM_BIN="kubeconform"

          ADDLICENSE_REPO="google/addlicense"
          ADDLICENSE_TAG="v1.1.1"              # valid
          ADDLICENSE_BIN="addlicense"

          # (Optional) SHA256 pins – populate these after a first successful run
          # TERRAFORM_DOCS_SHA256="<fill-me>"
          # KUBECONFORM_SHA256="<fill-me>"
          # ADDLICENSE_SHA256="<fill-me>"

          sudo apt-get update -y
          sudo apt-get install -y jq unzip xz-utils

          get_release_json() {
            local repo="$1" tag="$2"
            if [ -n "${GITHUB_TOKEN:-}" ]; then
              curl -fsSL -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${repo}/releases/tags/${tag}" || return 1
            else
              curl -fsSL "https://api.github.com/repos/${repo}/releases/tags/${tag}" || return 1
            fi
          }

          get_latest_release_json() {
            local repo="$1"
            if [ -n "${GITHUB_TOKEN:-}" ]; then
              curl -fsSL -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${repo}/releases/latest"
            else
              curl -fsSL "https://api.github.com/repos/${repo}/releases/latest"
            fi
          }

          pick_asset_url() {
            # stdin: release JSON
            # stdout: first linux/amd64 asset url
            jq -r '
              .assets[]
              | select(
                  (.name | test("linux"; "i"))
                  and
                  (.name | test("amd64|x86_64"; "i"))
                )
              | .browser_download_url
            ' | head -n1
          }

          install_from_release() {
            local repo="$1" tag="$2" bin_name="$3"
            echo "Looking up ${repo} ${tag}…"
            release_json="$(get_release_json "$repo" "$tag" || true)"

            if [ -z "${release_json}" ] || [ "${release_json}" = "null" ]; then
              echo "Tag ${tag} not found for ${repo}; falling back to latest"
              release_json="$(get_latest_release_json "$repo")"
            fi

            url="$(echo "$release_json" | pick_asset_url)"
            if [ -z "$url" ] || [ "$url" = "null" ]; then
              echo "ERROR: no linux/amd64 asset found for ${repo}"
              echo "$release_json" | jq -r '.assets[].name' || true
              return 1
            fi

            echo "Downloading ${bin_name} from: $url"
            tmpdir="$(mktemp -d)"
            archive="$tmpdir/asset.archive"
            curl -fsSL -L -o "$archive" "$url"

            echo "sha256 (unverified):"
            sha256sum "$archive" || true

            # Verify checksum if you’ve pinned it above
            # case "$bin_name" in
            #   terraform-docs) echo "${TERRAFORM_DOCS_SHA256}  $archive" | sha256sum -c - ;;
            #   kubeconform)    echo "${KUBECONFORM_SHA256}  $archive"   | sha256sum -c - ;;
            #   addlicense)     echo "${ADDLICENSE_SHA256}  $archive"    | sha256sum -c - ;;
            # esac

            # Try extraction; handle different archive formats
            if file "$archive" | grep -qi 'Zip archive data'; then
              unzip -q "$archive" -d "$tmpdir"
            else
              # try both common tar variants
              tar -xf "$archive" -C "$tmpdir" || {
                echo "ERROR: could not extract $archive"
                return 1
              }
            fi

            # Find the binary
            binpath="$(find "$tmpdir" -type f -perm /111 -name "$bin_name" -print -quit)"
            if [ -z "$binpath" ]; then
              # sometimes the binary is named with suffixes; pick first executable
              binpath="$(find "$tmpdir" -type f -perm /111 -print -quit)"
            fi
            if [ -z "$binpath" ]; then
              echo "ERROR: executable not found for ${bin_name}"
              ls -la "$tmpdir"
              return 1
            fi

            mv "$binpath" "${BIN_DIR}/${bin_name}"
            chmod +x "${BIN_DIR}/${bin_name}"
            echo "Installed ${bin_name} -> ${BIN_DIR}/${bin_name}"
            rm -rf "$tmpdir"
          }

          install_from_release "$TERRAFORM_DOCS_REPO" "$TERRAFORM_DOCS_TAG" "$TERRAFORM_DOCS_BIN"
          install_from_release "$KUBECONFORM_REPO"    "$KUBECONFORM_TAG"    "$KUBECONFORM_BIN"
          install_from_release "$ADDLICENSE_REPO"     "$ADDLICENSE_TAG"     "$ADDLICENSE_BIN"

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks
        env:
          PCT_TFPATH: terraform
        run: pre-commit run --all-files

  tf-validate:
    name: Terraform Validate (dev/test/prod)
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env_dir: [dev]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"
      - name: terraform fmt (repo-wide)
        run: terraform fmt -check -recursive
      - name: terraform init (no backend)
        working-directory: env/${{ matrix.env_dir }}
        run: terraform init -backend=false
      - name: terraform validate
        working-directory: env/${{ matrix.env_dir }}
        run: terraform validate

  tf-plan:
    name: Terraform Plan (PR only)
    if: github.event_name == 'pull_request'
    needs: tf-validate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env_dir: [dev]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"
      - name: terraform init (no backend)
        working-directory: env/${{ matrix.env_dir }}
        run: terraform init -backend=false
      - name: terraform plan
        working-directory: env/${{ matrix.env_dir }}
        run: |
          terraform plan \
            -input=false -refresh=false -lock=false \
            -out=tfplan.bin || true
      - name: show plan
        working-directory: env/${{ matrix.env_dir }}
        run: terraform show -no-color tfplan.bin > tfplan.txt || true
      - name: upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env_dir }}-tfplan
          path: env/${{ matrix.env_dir }}/tfplan.txt
