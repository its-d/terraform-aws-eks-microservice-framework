# Copyright 2025 Darian Lee
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
name: CI

"on":
  push:
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - ".pre-commit-config.yaml"
      - "scripts/**"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - ".pre-commit-config.yaml"
      - "scripts/**"
      - ".github/workflows/ci.yml"

permissions:
  contents: read

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Code Scan (pre-commit)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: "v0.53.0"

      - name: Point pre-commit to terraform
        run: echo "PCT_TFPATH=$(which terraform)" >> $GITHUB_ENV

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks
        env:
          PCT_TFPATH: terraform
        run: pre-commit run --all-files

  tf-validate:
    name: Terraform Validate (dev/test/prod)
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env_dir: [dev]
        # Add depending on your env directories
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"
      - name: terraform fmt (repo-wide)
        run: terraform fmt -check -recursive
      - name: terraform init (no backend)
        working-directory: env/${{ matrix.env_dir }}
        run: terraform init -backend=false
      - name: terraform validate
        working-directory: env/${{ matrix.env_dir }}
        run: terraform validate

  tf-plan:
    name: Terraform Plan (PR only)
    if: github.event_name == 'pull_request'
    needs: tf-validate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env_dir: [dev]  # test, prod
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"
      - name: terraform init (no backend)
        working-directory: env/${{ matrix.env_dir }}
        run: terraform init -backend=false
      - name: terraform plan
        working-directory: env/${{ matrix.env_dir }}
        run: |
          terraform plan \
            -input=false -refresh=false -lock=false \
            -out=tfplan.bin || true
      - name: show plan
        working-directory: env/${{ matrix.env_dir }}
        run: terraform show -no-color tfplan.bin > tfplan.txt || true
      - name: upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.env_dir }}-tfplan
          path: env/${{ matrix.env_dir }}/tfplan.txt
